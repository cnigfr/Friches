library(tidyverse)
library(jsonlite)
library(glue)
s <- read_json("../schema.json")
s <- read_json("../../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
fields
s <- read_json("../../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(inputFile, fields) {
f <- read.csv(inputFile, encoding = "UTF-8")
df_l <- list()
# On parcourt chaque champ du schéma pour voir s'il existe ou non dans la donnée
# S'il n'existe pas, on le rajoute
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
# Ajout de la colonne avec valeur NA
df_l[[field]] <- NA
} else {
# On prend la colonne précédente
df_l[[field]] <- f[[field]]
}
# Rajoute les 0 le cas échéant à COLL_INSEE
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
# On convertit la liste en data frame
df <- data.frame(df_l)
return(df)
}
df <- correctFile("../exemple-valide.csv", fields)
df <- correctFile("../../exemple-valide.csv", fields)
write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
fields
df <- correctFile("../../exemple-valide.csv", fields)
# write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
names(df)
df$VEH_MAX
df <- correctFile("../../exemple-valide.csv", fields)
# write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
names(df)
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
correctFile <- function(f, fields) {
df_l <- list()
# On parcourt chaque champ du schéma pour voir s'il existe ou non dans la donnée
# S'il n'existe pas, on le rajoute
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
# Ajout de la colonne avec valeur NA
df_l[[field]] <- NA
} else {
# On prend la colonne précédente
df_l[[field]] <- f[[field]]
}
# Rajoute les 0 le cas échéant à COLL_INSEE
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
# On convertit la liste en data frame
df <- data.frame(df_l)
return(df)
}
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
# write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
names(df1)
names(df2)
s <- read_json("../../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(f, fields) {
df_l <- list()
# On parcourt chaque champ du schéma pour voir s'il existe ou non dans la donnée
# S'il n'existe pas, on le rajoute
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
# Ajout de la colonne avec valeur NA
df_l[[field]] <- NA
} else {
# On prend la colonne précédente
df_l[[field]] <- f[[field]]
}
# Rajoute les 0 le cas échéant à COLL_INSEE
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
# On convertit la liste en data frame
df <- data.frame(df_l)
return(df)
}
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
nrow(df1) == nrow(df2)
names(df1)
df1$VEH_TONNAGE
df2$VEH_TONNAGE
l <- list.files("../../exemples", "*.csv", full.names = T)
l
l <- list.files("../../exemples", "*.csv", full.names = T)
print(l)
for(inputFile in l) {
message(">> file : ", inputFile)
df <- correctFile(inputFile, fields)
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
df
names(df)
l
for(inputFile in l) {
message(">> file : ", inputFile)
df <- correctFile(inputFile, fields)
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
fields
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
write.csv(df2, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
nrow(df1) == nrow(df2)
write.csv(df2, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
names(df)
write.csv(df, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
write.csv(df2, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
l
inputFile <- l[[1]]
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df1
glimpse(df1)
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
write.csv(df2, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
inputFile = l[[1]]
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
df2$COLL_INSEE
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
write.csv(df2, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
